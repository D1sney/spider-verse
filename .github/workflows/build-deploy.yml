name: Build and Deploy Code

# on указывает на тригеры, после чего будет запускаться этот процесс
on:
  push:
    # внутри push и pull_request можно указать отдельные ветки на которые распространяется тригер отдельно для push и pull_request
    branches: ["main"]
  pull_request:
    branches: ["main"]

jobs:
  # build наше название для контейнера с инструкциями
  build:
    # мы должны создать environments в github, туда добавить наши secrets, и здесь указать такое же имя как при создании, чтобы корректно подставились данные
    environment:
      name: testing
    # переменные созданные специально для build и не распространяются на другие jobs
    env:
      # с помощью такого синтаксиса мы обращаемся к секретным переменным внутри github
      DB_HOST: ${{secrets.DB_HOST}}
      DB_PORT: ${{secrets.DB_PORT}}
      DB_NAME: ${{secrets.DB_NAME}}
      DB_USER: ${{secrets.DB_USER}}
      DB_PASS: ${{secrets.DB_PASS}}
      SECRET_KEY: ${{secrets.SECRET_KEY}}
      ALGORITHM: ${{secrets.ALGORITHM}}
      ACCESS_TOKEN_EXPIRE_MINUTES: ${{secrets.ACCESS_TOKEN_EXPIRE_MINUTES}}
      BASE_URL: ${{secrets.BASE_URL}}

    # нам необходимо создать бд на удаленной машине для тестов (конечно если мы указываем localhost а не удаленную бд)
    # мы можем это сделать, запустив докер контейнер с postgres бд и создав там базу данных для тестирования
    services:
      postgres:
        # официальный docker image с postgres бд
        image: postgres
        env:
          POSTGRES_PASSWORD: ${{secrets.DB_PASS}}
          # как и в наших тестах мы добавляем к имени бд - _test, потому что тесты будут искать бд именно с таким именем
          POSTGRES_DB: ${{secrets.DB_NAME}}_test
        # по неизвестным причинам порты нужно хардкодить и нельзя их передать через secret переменную из environments
        ports:
          - 5432:5432
        # эти options необходимы для корректной работы бд, чтобы тесты не запускались пока бд еще не создана
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    runs-on: ubuntu-latest
    # внутри steps мы даем инструкции, что нужно делать, name - просто название, а дальше инструкция
    steps:
      - name: pulling git repo
        uses: actions/checkout@v4
      - name: say hi to disney
        # мы можем запускать с помощью run любые linux комманды
        run: echo "hello disney"
      - name: install python version 3.11
        # устанавливаем python через github marketplace, там же можно найти документацию
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
      - name: update pip
        # обновляем pip
        run: python -m pip install --upgrade pip
      - name: install all dependencies
        # устанавливаем зависимости из файла requirements.txt
        run: pip install -r requirements.txt
      - name: test with pytest
        # проходимся тестами
        run: |
          pip install pytest
          pytest -v -s

      #   # пушим наш image в docker hub
      # - name: Login to Docker Hub
      #   uses: docker/login-action@v3
      #   with:
      #     username: ${{secrets.DOCKER_HUB_USERNAME}}
      #     password: ${{secrets.DOCKER_HUB_ACCESS_TOKEN}}

      # - name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v3

      # - name: Build and push
      #   uses: docker/build-push-action@v6
      #   with:
      #     # Эти поля есть в курсе, в новой версии они уже не нужны. Раньше они отвечали за путь к файлу, относительный и прямой
      #     # context: ./
      #     # file: ./Dockerfile
      #     push: true
      #     tags: ${{secrets.DOCKER_HUB_USERNAME}}/spider-verse:latest
      #     # в документации сказанно что это самый часто применяемый вид кэширования
      #     cache-from: type=registry,ref=${{secrets.DOCKER_HUB_USERNAME}}/spider-verse:latest
      #     cache-to: type=inline

  # deploy это job который отвечает за деплой кода на продакшен сервер
  deploy:
    runs-on: ubuntu-latest
    # needs ждет пока выполнятся jobs из списка. Если хоть одни job зафейлиться, то deploy не исполнится, это защищает нас от того, что если внутри build зафейляться тесты, то код не будет задеплоин на продакшен сервер
    needs: [build]
    # мы должны создать environments в github, туда добавить наши secrets, и здесь указать такое же имя как при создании, чтобы корректно подставились данные
    # environment:
    #   name: production
    steps:
      - name: print deploying
        run: echo "going to deploy"
        # документация есть в github marketplace
      # - name: executing remote ssh commands using password
      #   uses: appleboy/ssh-action@v1.0.3
      #   with:
      #     host: ${{secrets.HOST}}
      #     username: ${{secrets.USERNAME}}
      #     password: ${{secrets.PASSWORD}}
      #     port: ${{secrets.PORT}}
      #     script: |
      #       cd app/src
      #       git pull
      #       echo ${{secrets.PASSWORD}} | sudo -S systemctl restart api
